import Head from "next/head";
import styles from "@/src/styles/Home.module.css";
import Link from "next/link";
import { MutableRefObject, useEffect, useRef, useState } from "react";
import { observable } from "@legendapp/state";
import { IStrategyInput, IStrategySnapshot } from "../helpers/strategies/types";

// const processingPercentage = observable(0);
// processingPercentage.onChange((value) => {
//   console.log("---------", "processingPercentage.onChange", value);
// });

// export async function getServerSideProps(context) {
//   return {
//     props: {}, // will be passed to the page component as props
//   };
// }

const defaultInput: IStrategyInput = {
  initial_portfolio: { tokenVolatile: { symbol: "ETH", amount: 0 }, tokenStable: { symbol: "USDT", amount: 1000 } },
  buy_trailing: { percent: 0.0000001 },
  sell_trailing: { percent: 0.0000001 },
  fee: { percent: 0 },
  period: { starting_date: 1640995200000 },
};

export default function PerpetualTrailing() {
  const [snapshots, setSnapshots] = useState<IStrategySnapshot[]>([]);
  console.log('---------', 'snapshots.length', snapshots.length);
  
  const lastSnapshot = snapshots[snapshots.length - 1] ?? {};
  const isProcessingRef = useRef(false);
  const kLinesAmount = observable(0);

  const fetchData = async (isProcessingRef: MutableRefObject<boolean>) => {
    isProcessingRef.current = true;
    const params = { input: JSON.stringify(defaultInput) };
    const url = new URL("/api/strategies/perpetual_trailing", window.location.origin);
    Object.entries(params).forEach(([key, value]) => url.searchParams.set(key, value));
    const eventSource = new EventSource(url.toString());

    // const eventSource = new EventSource("/api/strategies/perpetual_trailing");

    eventSource.addEventListener("processing", (event) => {
      const data = JSON.parse(event.data);
      // processingPercentage.set(data.progress_percentage);
      setSnapshots((prev) => [...prev, data]);
      console.log("Received processing event:", JSON.stringify(data, null, " "));
    });

    eventSource.addEventListener("complete", (event) => {
      const data = JSON.parse(event.data);
      console.log("Received complete event:", JSON.stringify(JSON.parse(event.data), null, " "));
      isProcessingRef.current = false;
      eventSource.close();
    });

    return () => {
      eventSource.close();
    };
  };

  useEffect(() => {
    if (!isProcessingRef.current) {
      fetchData(isProcessingRef);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>Snapshot</h1>
        <pre>
          <code>{JSON.stringify(lastSnapshot, null, " ")}</code>
        </pre>
        <div className={styles.description}>
          <p>
            <Link href={"/"}>Come back home</Link>
          </p>
        </div>
      </main>
    </>
  );
}
